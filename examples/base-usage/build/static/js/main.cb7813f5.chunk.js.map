{"version":3,"sources":["libs/editable-history/history-utils/PathUtils.ts","libs/editable-history/utils.ts","libs/editable-history/HistoryEditor.ts","libs/fluid-router/index.tsx","libs/editable-history/createEditableHistory.ts","fluids/docs/screens/PPTPage.tsx","fluids/route.ts","fluids/docs/docsFluid.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["addLeadingSlash","path","charAt","stripTrailingSlash","length","slice","isEditableHistoryState","state","arguments","undefined","hasOwnProperty","getHashPath","url","href","window","location","hashIndex","indexOf","substring","getAbsolutePath","useHash","basename","pathname","createHistoryKey","Math","random","toString","substr","PopStateEvent","rawHistory","history","HistoryEditor","_ref","_this","this","_ref$basename","_ref$initState","initState","_ref$useHash","Object","classCallCheck","historyState","predictionAction","keyOrIndex","eh_sl","findIndex","stateObject","k","input","isIndex","indexOfActive","eh_ck","cutHitoryList","topKey","topIndex","s","splice","isBack","key","historyList","some","handlerRawHistoryState","ev","_ref2","_ref2$eh_ck","_ref2$eh_sl","cb","replaceState","toJS","index","push","newHistoryKey","l","stepProcessor","targetIndex","activeIndex","predictionKey","go","params","_params$keyOrIndex","historyKey","absoluteUrl","pushState","console","warn","concat","replace","_params$keyOrIndex2","forEach","active","done","addEventListener","observable","newHistoryState","createClass","get","FluidRouter","observer","initPage","editableHistory","props","_props$basename","_props$useHash","historyEditor","createEditableHistory","navigation","pushScreen","Comp","setState","defineProperty","styles","react_default","a","createElement","renderprops","div","style","objectSpread","position","width","isPush","lastLength","_this2","reaction","routes","docsFluid","_this3","Fragment","native","reset","unique","items","from","opacity","transform","enter","leave","Component","defaultProps","PPTPage","className","pageNumber","display","onClick","onBack","onNext","route","/docs","displayPage","App","fluid_router_FluidRouter","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cb7813f5.chunk.js","sourcesContent":["/**\n * copy from https://github.com/ReactTraining/history\n */\nexport function addLeadingSlash(path: string) {\n    return path.charAt(0) === '/' ? path : '/' + path\n}\n\nexport function stripLeadingSlash(path: string) {\n    return path.charAt(0) === '/' ? path.substr(1) : path\n}\n\nexport function hasBasename(path: string, prefix: string) {\n    return (\n        path.toLowerCase().indexOf(prefix.toLowerCase()) === 0 &&\n        '/?#'.indexOf(path.charAt(prefix.length)) !== -1\n    )\n}\n\nexport function stripBasename(path: string, prefix: string) {\n    return hasBasename(path, prefix) ? path.substr(prefix.length) : path\n}\n\nexport function stripTrailingSlash(path: string) {\n    return path.charAt(path.length - 1) === '/' ? path.slice(0, -1) : path\n}\n\nexport function parsePath(path: string) {\n    let pathname = path || '/'\n    let search = ''\n    let hash = ''\n\n    const hashIndex = pathname.indexOf('#')\n    if (hashIndex !== -1) {\n        hash = pathname.substr(hashIndex)\n        pathname = pathname.substr(0, hashIndex)\n    }\n\n    const searchIndex = pathname.indexOf('?')\n    if (searchIndex !== -1) {\n        search = pathname.substr(searchIndex)\n        pathname = pathname.substr(0, searchIndex)\n    }\n\n    return {\n        pathname,\n        search: search === '?' ? '' : search,\n        hash: hash === '#' ? '' : hash\n    }\n}\n\nexport function createPath(location: { pathname?: string; search?: string; hash?: string }) {\n    const { pathname, search, hash } = location\n\n    let path = pathname || '/'\n\n    if (search && search !== '?') path += search.charAt(0) === '?' ? search : `?${search}`\n\n    if (hash && hash !== '#') path += hash.charAt(0) === '#' ? hash : `#${hash}`\n\n    return path\n}\n","import {\n    stripBasename,\n    parsePath,\n    stripTrailingSlash,\n    addLeadingSlash\n} from './history-utils/PathUtils'\n\nexport function isEditableHistoryState(state: any = {}) {\n    state = state || {}\n    return state.hasOwnProperty('eh_ck') && state.hasOwnProperty('eh_sl')\n}\n\nexport function isKey(input: string | number) {\n    return typeof input === 'string'\n}\n\nexport function isIndex(input: string | number) {\n    return typeof input === 'number'\n}\n\nexport function getLocation(path: string, basename: string) {\n    if (path) {\n        path = stripTrailingSlash(addLeadingSlash(path))\n        if (basename) {\n            path = stripBasename(path, basename)\n        }\n        return parsePath(path)\n    } else {\n        return {\n            pathname: '/',\n            hash: '',\n            search: ''\n        }\n    }\n}\n\nexport function getHashPath(url?: string) {\n    const href = url || window.location.href\n    const hashIndex = href.indexOf('#')\n    return hashIndex === -1 ? '' : href.substring(hashIndex + 1)\n}\n\nexport function getAbsolutePath(url: string | undefined, useHash: boolean, basename: string) {\n    url = url || ''\n    if (useHash) {\n        url = window.location.pathname + '#' + basename + stripTrailingSlash(addLeadingSlash(url))\n    } else {\n        url = basename + stripTrailingSlash(addLeadingSlash(url))\n    }\n\n    return url\n}\n\nexport function createHistoryKey() {\n    return Math.random()\n        .toString(36)\n        .substr(2, 8)\n}\n","import { createHistoryKey, isEditableHistoryState } from './utils'\nimport { isKey, isIndex, getHashPath, getAbsolutePath } from './utils'\nimport { stripTrailingSlash, addLeadingSlash } from './history-utils/PathUtils'\nimport { observable, toJS } from 'mobx'\n\nconst PopStateEvent = 'popstate'\nconst rawHistory = window.history\n\ntype ScreenStateObject = {\n    k: string //history key\n    s: unknown // business state\n    l: string // `window.location.pathname` or `hash`\n}\n\ntype HistoryState = {\n    eh_ck: string // current key\n    eh_sl: ScreenStateObject[] // screen state list\n}\n\ntype HistoryEditorProps = {\n    basename?: string\n    initState?: unknown\n    useHash: boolean\n}\n\ntype PushParams = {\n    state?: unknown\n    url?: string\n    keyOrIndex?: string | number\n}\n\ntype ReplaceParams = {\n    state?: unknown\n    url?: string\n    keyOrIndex?: string | number\n}\n\nexport class HistoryEditor {\n    private historyState: HistoryState\n    private basename = ''\n    private useHash = false\n    constructor({ basename = '', initState = null, useHash = false }: HistoryEditorProps) {\n        this.basename = basename ? stripTrailingSlash(addLeadingSlash(basename)) : ''\n        this.useHash = useHash\n        window.addEventListener(PopStateEvent, this.handlerRawHistoryState)\n\n        if (isEditableHistoryState(rawHistory.state)) {\n            this.historyState = observable(rawHistory.state)\n        } else {\n            const historyKey = createHistoryKey()\n            const newHistoryState = {\n                eh_ck: historyKey,\n                eh_sl: [\n                    {\n                        k: historyKey,\n                        s: initState,\n                        l: this.useHash ? getHashPath() : window.location.pathname\n                    }\n                ]\n            }\n            this.historyState = observable(newHistoryState)\n            rawHistory.replaceState(toJS(this.historyState), '')\n        }\n    }\n\n    predictionAction?: {\n        key: string\n        cb?: Function\n    }\n\n    indexOf = (keyOrIndex: string | number): number => {\n        if (isKey(keyOrIndex)) {\n            return this.historyState.eh_sl.findIndex(stateObject => {\n                return stateObject.k === keyOrIndex\n            })\n        } else if (isIndex(keyOrIndex)) {\n            if (this.historyState.eh_sl[keyOrIndex as number]) {\n                return keyOrIndex as number\n            } else {\n                return -1\n            }\n        } else {\n            return -1\n        }\n    }\n\n    indexOfActive = () => {\n        return this.historyState.eh_sl.findIndex(stateObject => {\n            return stateObject.k === this.historyState.eh_ck\n        })\n    }\n\n    cutHitoryList = (topKey: string) => {\n        const topIndex = this.historyState.eh_sl.findIndex(s => {\n            return s.k === topKey\n        })\n        if (topIndex > -1) {\n            this.historyState.eh_sl.splice(\n                topIndex + 1,\n                this.historyState.eh_sl.length - topIndex - 1\n            )\n        }\n    }\n\n    isBack = (key: string) => {\n        return this.historyList.eh_sl.some(s => {\n            return s.k === key\n        })\n    }\n\n    handlerRawHistoryState = (ev: PopStateEvent) => {\n        const { eh_ck = undefined, eh_sl = undefined } = ev.state || {}\n        if (this.predictionAction && this.predictionAction.key === eh_ck) {\n            const cb = this.predictionAction.cb\n            this.predictionAction = undefined\n            this.historyState.eh_ck = eh_ck\n            this.cutHitoryList(eh_ck)\n            rawHistory.replaceState(toJS(this.historyState), '')\n            if (typeof cb === 'function') {\n                cb()\n            }\n        } else {\n            if (isEditableHistoryState(ev.state)) {\n                if (this.isBack(eh_ck)) {\n                    this.cutHitoryList(eh_ck)\n                } else {\n                    for (\n                        let index = this.historyState.eh_sl.length;\n                        index < eh_sl.length;\n                        index++\n                    ) {\n                        this.historyState.eh_sl.push(eh_sl[index])\n                    }\n                }\n                this.historyState.eh_ck = eh_ck\n                rawHistory.replaceState(toJS(this.historyState), '')\n            } else {\n                const newHistoryKey = createHistoryKey()\n\n                this.historyState.eh_sl.splice(\n                    this.indexOfActive() + 1,\n                    this.historyState.eh_sl.length - this.indexOfActive() - 1\n                )\n\n                this.historyState.eh_sl.push({\n                    k: newHistoryKey,\n                    s: null,\n                    l: this.useHash ? getHashPath() : window.location.pathname\n                })\n\n                this.historyState.eh_ck = newHistoryKey\n\n                rawHistory.replaceState(toJS(this.historyState), '')\n            }\n        }\n    }\n\n    stepProcessor = (targetIndex: number, cb?: Function) => {\n        targetIndex = this.indexOf(targetIndex)\n        const activeIndex = this.indexOfActive()\n        if (targetIndex > -1 && targetIndex < activeIndex) {\n            const predictionKey = this.historyState.eh_sl[targetIndex].k\n            this.predictionAction = {\n                key: predictionKey,\n                cb\n            }\n            rawHistory.go(targetIndex - activeIndex)\n        } else {\n            if (typeof cb === 'function') {\n                cb()\n            }\n        }\n    }\n\n    push = (params: PushParams = {}) => {\n        const { state, url, keyOrIndex = this.indexOfActive() } = params\n        let targetIndex = this.indexOf(keyOrIndex)\n        if (targetIndex < 0) {\n            console.warn(`[push]: \\`keyOrIndex\\`=${keyOrIndex} is out of range'`)\n            return\n        }\n        const historyKey = createHistoryKey()\n\n        const absoluteUrl = getAbsolutePath(url, this.useHash, this.basename)\n\n        this.stepProcessor(targetIndex, () => {\n            this.historyState.eh_sl.splice(\n                targetIndex + 1,\n                this.historyState.eh_sl.length - targetIndex - 1\n            )\n\n            this.historyState.eh_sl.push({\n                k: historyKey,\n                s: state,\n                l: this.useHash ? getHashPath(absoluteUrl) : absoluteUrl\n            })\n            this.historyState.eh_ck = historyKey\n\n            rawHistory.pushState(toJS(this.historyState), '', absoluteUrl || '/')\n        })\n        return historyKey\n    }\n\n    replace = (params: ReplaceParams) => {\n        const { state, url, keyOrIndex = this.indexOfActive() } = params\n        let targetIndex = this.indexOf(keyOrIndex)\n        if (targetIndex < 0 || targetIndex > this.indexOfActive()) {\n            console.warn(`[replace]: \\`keyOrIndex\\`=${keyOrIndex} is out of range'`)\n            return\n        }\n        const historyKey = createHistoryKey()\n        const absoluteUrl = getAbsolutePath(url, this.useHash, this.basename)\n\n        this.stepProcessor(targetIndex, () => {\n            this.historyState.eh_sl.forEach((stateObject, index) => {\n                if (index === targetIndex) {\n                    stateObject.k = historyKey\n                    stateObject.l = this.useHash ? getHashPath(absoluteUrl) : absoluteUrl\n                    stateObject.s = state\n                }\n            })\n\n            this.historyState.eh_ck = historyKey\n\n            rawHistory.replaceState(toJS(this.historyState), '', absoluteUrl || '/')\n        })\n        return historyKey\n    }\n\n    active = (keyOrIndex: string | number, done: () => void) => {\n        const targetIndex = this.indexOf(keyOrIndex)\n        if (targetIndex < 0 || targetIndex > this.indexOfActive()) {\n            console.warn(`[active]: \\`keyOrIndex\\`=${keyOrIndex} is out of range'`)\n            return\n        }\n        this.stepProcessor(targetIndex, done)\n    }\n\n    get historyList() {\n        return this.historyState\n    }\n}\n","import React, { Component } from 'react'\nimport { createEditableHistory } from '../editable-history'\nimport { observer } from 'mobx-react'\nimport { reaction } from 'mobx'\nimport { Transition, animated } from 'react-spring/renderprops'\n\ntype FluidRouterProps = {\n    useHash?: boolean\n    routes: any[]\n}\n\n@observer\nexport default class FluidRouter extends Component<FluidRouterProps> {\n    static defaultProps = {\n        useHash: false\n    }\n    initPage = true\n    editableHistory = createEditableHistory({ useHash: this.props.useHash })\n    navigation = {\n        pushScreen: (Comp: any) => {\n            let key: string\n            if (this.editableHistory.historyList.eh_sl.length === 1 && this.initPage) {\n                this.initPage = false\n                key = this.editableHistory.replace({ url: '/docs' }) || ''\n            } else {\n                key = this.editableHistory.push({ url: '/docs' }) || ''\n            }\n\n            const AnimatedComp = (styles: any) => (\n                <animated.div\n                    key={key}\n                    style={{\n                        ...styles,\n                        position: 'absolute',\n                        width: '100%'\n                    }}\n                >\n                    {Comp}\n                </animated.div>\n            )\n\n            this.setState({\n                [`${key}`]: AnimatedComp\n            })\n        }\n    }\n    state: any = {\n        isPush: true\n    }\n    lastLength: number = 0\n    componentDidMount() {\n        reaction(\n            () => this.editableHistory.historyList.eh_sl.length,\n            length => {\n                this.setState({\n                    isPush: length > this.lastLength\n                })\n                this.lastLength = length\n            }\n        )\n        const { routes } = this.props\n        this.editableHistory.active(0, () => {\n            // test\n            const docsFluid = routes[0]['/docs']\n            docsFluid(this.navigation)\n        })\n    }\n    render() {\n        return (\n            <>\n                {this.editableHistory.historyList.eh_sl.length > 0 ? (\n                    <>\n                        {this.state.isPush ? (\n                            <Transition\n                                native\n                                reset\n                                unique\n                                items={this.editableHistory.historyList.eh_ck}\n                                from={{ opacity: 1, transform: 'translate3d(100%,0,0)' }}\n                                enter={{ opacity: 1, transform: 'translate3d(0%,0,0)' }}\n                                leave={{ opacity: 0, transform: 'translate3d(-50%,0,0)' }}\n                            >\n                                {eh_ck => {\n                                    return this.state[eh_ck]\n                                }}\n                            </Transition>\n                        ) : (\n                            <Transition\n                                native\n                                reset\n                                unique\n                                items={this.editableHistory.historyList.eh_ck}\n                                from={{ opacity: 1, transform: 'translate3d(-100%,0,0)' }}\n                                enter={{ opacity: 1, transform: 'translate3d(0%,0,0)' }}\n                                leave={{ opacity: 0, transform: 'translate3d(50%,0,0)' }}\n                            >\n                                {eh_ck => {\n                                    return this.state[eh_ck]\n                                }}\n                            </Transition>\n                        )}\n                    </>\n                ) : null}\n            </>\n        )\n    }\n}\n","import { HistoryEditor } from './HistoryEditor'\n\ntype createEditableHistoryProps = {\n    basename?: string\n    useHash?: boolean\n}\n\n// let hasCreated = false\n\nexport default function createEditableHistory(props: createEditableHistoryProps = {}) {\n    const { basename = '', useHash = false } = props\n\n    // if (hasCreated) {\n    //     console.warn('A window supports only one editableHistory at a time')\n    //     return\n    // }\n    // hasCreated = true\n\n    const historyEditor = new HistoryEditor({\n        basename,\n        useHash\n    })\n\n    return {\n        push: historyEditor.push,\n        replace: historyEditor.replace,\n        active: historyEditor.active,\n        historyList: historyEditor.historyList,\n        length: historyEditor.historyList.eh_sl.length\n    }\n}\n","import React from 'react'\n\ntype PPTPageProps = {\n    pageNumber: number\n    onNext: () => void\n    onBack: () => void\n}\n\nexport default (props: PPTPageProps) => {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <p>{'Page ' + props.pageNumber}</p>\n                <div style={{ display: 'flex' }}>\n                    {props.pageNumber === 1 ? null : (\n                        <div className=\"App-link\" onClick={props.onBack}>\n                            prev\n                        </div>\n                    )}\n                    <div className=\"App-link\" onClick={props.onNext}>\n                        next\n                    </div>\n                </div>\n            </header>\n        </div>\n    )\n}\n","import docsFluid from './docs/docsFluid'\n\nexport default {\n    '/docs': docsFluid\n}\n","import React from 'react'\nimport PPTPage from './screens/PPTPage'\n\nexport default (navigation: any) => {\n    const displayPage = (pageNumber: number) => {\n        navigation.pushScreen(\n            <PPTPage\n                pageNumber={pageNumber}\n                onNext={() => {\n                    displayPage(pageNumber + 1)\n                }}\n                onBack={() => {\n                    window.history.go(-1)\n                }}\n            />\n        )\n    }\n    displayPage(1)\n}\n","import React from 'react'\nimport './App.css'\nimport FluidRouter from './libs/fluid-router'\nimport routes from './fluids/route'\n\nconst App: React.FC = () => {\n    return <FluidRouter useHash={true} routes={[routes]} />\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}